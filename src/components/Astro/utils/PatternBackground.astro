---
/**
 * @description Component for creating decorative SVG pattern backgrounds with customizable opacity and presets.
 * @param {Props} props - PatternBackground configuration
 * @example
 * ```astro
 * // Using a preset pattern
 * <PatternBackground
 *   pattern="dots"
 *   patternOpacity={0.15}
 * />
 *
 * // Using a preset with custom sizing
 * <PatternBackground
 *   pattern="grid"
 *   patternSize={40}
 *   strokeWidth={2}
 * />
 *
 * // Using a custom pattern
 * <PatternBackground
 *   pattern="M0 0h10v10H0z"
 *   patternOpacity={0.2}
 *   animate={false}
 * />
 *
 * // Full customization
 * <PatternBackground
 *   pattern="waves"
 *   patternSize={50}
 *   strokeWidth={1.5}
 *   patternOpacity={0.1}
 *   animate={true}
 *   class="my-custom-pattern"
 * />
 * ```
 * @note
 * - Includes preset patterns: dots, diagonal, grid, waves, circuit
 * - Supports custom SVG path data
 * - Radial gradient mask for fade-out effect
 * - Configurable pattern size and stroke width
 * - Optional animation effects
 * - Uses currentColor for theme compatibility
 * - Optimized SVG rendering with non-scaling-stroke
 */



// common pattern presets
const PATTERN_PRESETS = {
	dots: "M2 2h2v2H2z",
	diagonal: "M0 0l5 5l-5 5l5-5z",
	grid: "M10 10h10v10H10z",
	waves: "M0 10c2.8 0 2.8 5 5.6 5s2.8-5 5.6-5 2.8 5 5.6 5 2.8-5 5.6-5",
	circuit: "M5 0v10M0 5h10M15 0v10M10 5h10",
} as const;

export interface Props {
	/** SVG path data for the pattern or preset name */
	pattern: string | keyof typeof PATTERN_PRESETS;
	/** Opacity value for the pattern (0-1) */
	patternOpacity?: number;
	/** Pattern size in pixels */
	patternSize?: number;
	/** Pattern stroke width */
	strokeWidth?: number;
	/** Enable/disable pattern animation */
	animate?: boolean;
	/** Optional CSS classes */
	class?: string |  undefined;
}

const {
	pattern,
	patternOpacity = 0.1,
	patternSize = 30,
	strokeWidth = 1,
	animate = true,
	class: className = "",
} = Astro.props;

// Get pattern data from preset or use custom pattern
const patternData = PATTERN_PRESETS[pattern as keyof typeof PATTERN_PRESETS] || pattern;

// Generate a unique ID for the pattern
const patternId = `pattern-${crypto.randomUUID()}`;
---

<div
	class:list={[
		`absolute inset-0 -z-10 h-full w-full`,
		className,
		{ "fade-in": animate }
	]}
	aria-hidden="true"
>
	<svg
		xmlns="http://www.w3.org/2000/svg"
		class:list={[
			"absolute inset-0 h-full w-full",
			{ "spinOnAxis": animate }
		]}
		style={`mask-image: radial-gradient(circle at 56% 8%, hsla(0,0%,0%,${patternOpacity}) 0%, transparent 60%);`}
		aria-hidden="true"
	>
		<defs>
			<pattern
				id={patternId}
				width={patternSize}
				height={patternSize}
				patternUnits="userSpaceOnUse"
				patternTransform="translate(-1 -1)"
			>
				<path
					d={patternData || PATTERN_PRESETS.circuit}
					stroke="currentColor"
					stroke-width={strokeWidth}
					fill="none"
					vector-effect="non-scaling-stroke"
				></path>
			</pattern>
		</defs>
		<rect width="100%" height="100%" fill={`url(#${patternId})`}></rect>
	</svg>
</div>
